📘 Day 21：報表整合與模組化設計（個人專案前的預備）
🎯 核心目標：

    彈性查詢模組整合（已完成）

    輸出功能模組化（已完成）

    Blueprint 與 init.py 結構理解（已完成）

    ✅ 新主題：建立完整「報表服務模組」，含下列功能：

        彈性輸出 Excel/CSV

        自動命名下載檔案（加上日期時間）

        整合多筆查詢條件

        增加錯誤處理（如果無資料時顯示提示）

🔧 Day 21 學習步驟規劃：
🧩 Part 1：下載檔案自動加上日期時間

    ✅ 示範如何在檔名後加上 orders_20250604.csv 這種格式

🧩 Part 2：無資料提示與錯誤處理

    如果沒有符合查詢的訂單，不下載空檔，而是返回訊息或導回頁面

🧩 Part 3：新增「查詢條件摘要」顯示在 HTML 上

    顯示目前的查詢條件（如：顧客名稱、日期範圍）

🧩 Part 4（可選）：報表加總資訊一併匯出到檔案底部

我會從第一個「自動命名下載檔案」開始，幫你示範並分解說明邏輯與程式碼。

準備好了嗎？我們立刻開始 Day 21：Part 1。

🧭 現在進入 Day 21 Part 1
🎯 目標：報表下載自動命名

    讓下載的檔名根據查詢條件自動變化，如：

        orders_小明.csv

        orders_2024-01-01_to_2024-02-01.xlsx

        orders_小明_2024-01-01_to_2024-02-01.csv

🧩 步驟規劃：

    新增函式 generate_filename() → 根據查詢條件自動產生檔案名稱

    匯出 CSV 時使用這個函式的檔名

    匯出 Excel 時也使用這個函式的檔名

🛠 第一步：建立 generate_filename() 函式

你可以先在 utils.py 建立以下內容（或暫時寫在 export.py 中）：

def generate_filename(customer_name=None, start_date=None, end_date=None, filetype="csv"):
    filename = "orders"
    if customer_name:
        filename += f"_{customer_name}"
    if start_date and end_date:
        filename += f"_{start_date}_to_{end_date}"
    elif start_date:
        filename += f"_{start_date}_and_after"
    elif end_date:
        filename += f"_before_{end_date}"
    return f"{filename}.{filetype}"

🧪 測試這個函式（可在 Python Console 測試）：

print(generate_filename("小明", "2024-01-01", "2024-02-01", "xlsx"))
# 👉 orders_小明_2024-01-01_to_2024-02-01.xlsx

✅ 修改後的 export_csv 範例：

from flask import Response
from io import StringIO
import csv

@app.route("/export_csv")
def export_csv():
    orders = get_filtered_orders()
    customer_name = request.args.get("customer")
    start_date = request.args.get("start")
    end_date = request.args.get("end")

    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(["顧客名稱", "商品名稱", "單價", "數量", "總金額", "訂單日期"])
    for order in orders:
        writer.writerow([
            order.customer.name,
            order.product.name,
            order.product.price,
            order.quantity,
            order.quantity * order.product.price,
            order.order_date.strftime("%Y-%m-%d")
        ])

    filename = generate_filename(customer_name, start_date, end_date, "csv")
    response = Response(output.getvalue(), content_type="text/csv")
    response.headers["Content-Disposition"] = f"attachment; filename={filename}"
    return response

✅ 修改後的 export_excel 範例：

from flask import send_file
from io import BytesIO
from openpyxl import Workbook

@app.route("/export_excel")
def export_excel():
    orders = get_filtered_orders()
    customer_name = request.args.get("customer")
    start_date = request.args.get("start")
    end_date = request.args.get("end")

    wb = Workbook()
    ws = wb.active
    ws.title = "訂單報表"
    ws.append(["顧客名稱", "商品名稱", "單價", "數量", "總金額", "訂單日期"])
    for order in orders:
        ws.append([
            order.customer.name,
            order.product.name,
            order.product.price,
            order.quantity,
            order.quantity * order.product.price,
            order.order_date.strftime("%Y-%m-%d")
        ])

    output = BytesIO()
    wb.save(output)
    output.seek(0)

    filename = generate_filename(customer_name, start_date, end_date, "xlsx")
    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )