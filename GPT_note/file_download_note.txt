✅ 第一部分：StringIO() vs BytesIO()
🔹 什麼是 StringIO？

    StringIO() 是 Python 的一個記憶體中文本緩衝區（模擬檔案）。

    它會「模擬一個文字檔案」，你可以對它 .write() 文字資料，最後用 .getvalue() 把所有內容取出。

    📄 適合用來儲存 純文字，像是 .csv（逗號分隔值）這種格式。

🔹 什麼是 BytesIO？

    BytesIO() 則是模擬位元組（bytes）檔案。

    像 Excel、圖片、PDF 等這些二進位檔案格式都不能用文字方式處理，因此需要用 BytesIO()。

🧪 簡單類比（幫助記憶）：
類型	類別	適用場景
StringIO	文字資料	CSV、純文字報表
BytesIO	二進位資料	Excel、圖片、PDF 等
✅ 第二部分：csv.writer(output) 是做什麼？

這段程式：

output = StringIO()
writer = csv.writer(output)

等於在說：

    「我不寫進實體硬碟的檔案，而是把 CSV 格式的資料寫進記憶體裡的 StringIO。」

這樣寫完後再用：

output.getvalue()

就能取得「整份 CSV 文字內容」，準備給使用者下載。
✅ 第三部分：CSV 與 EXCEL 的下載方式為何不同？
內容類型	使用方式	說明
CSV	Response(output.getvalue())	直接把文字資料變成網頁回應，設定 MIME 為 text/csv
Excel	send_file(output)	Excel 是二進位格式，需要透過 send_file 傳送 BytesIO() 資料
🔍 關鍵差別：

    Response() 適合處理文字。

    send_file() 才能處理「檔案格式」（如圖片、Excel、PDF 等二進位檔案）。

✅ 小抄整理

# CSV 匯出（純文字）
from io import StringIO
output = StringIO()
writer = csv.writer(output)
writer.writerow(["欄位1", "欄位2"])
response = Response(output.getvalue(), content_type="text/csv")
response.headers["Content-Disposition"] = "attachment; filename=data.csv"
return response

# Excel 匯出（二進位）
from io import BytesIO
output = BytesIO()
wb.save(output)
output.seek(0)
return send_file(output, as_attachment=True, download_name="data.xlsx",
                 mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")