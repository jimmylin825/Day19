✅ 整體邏輯回顧

你目前完成了：

    使用 SQLAlchemy 定義 Product, Customer, Order 三個資料表

    正確呼叫 Base.metadata.create_all(engine) 來建表

    已準備好 Session 連線

🔧 建議修正與強化（非常重要）
1️⃣ Order 的 customer_id 和 product_id 應該是整數並加上關聯

from sqlalchemy import ForeignKey

class Order(Base):
    __tablename__ = "order"
    id = Column(Integer, primary_key=True)
    customer_id = Column(Integer, ForeignKey("customer.id"))
    product_id = Column(Integer, ForeignKey("product.id"))
    quantity = Column(Integer)
    order_date = Column(String)

📌 使用 ForeignKey("表名.欄位名") 是 ORM 關聯的重要基礎。
2️⃣ 可加上 relationship（可等後續再加，現在也可以備好）

如果你未來要從訂單直接取得 order.customer.name 或 order.product.name，可這樣加：

from sqlalchemy.orm import relationship

class Customer(Base):
    __tablename__ = "customer"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    email = Column(String)
    orders = relationship("Order", backref="customer")

class Product(Base):
    __tablename__ = "product"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    price = Column(Integer)
    orders = relationship("Order", backref="product")

這樣你在查詢訂單時就可以用：

order.customer.name
order.product.name

3️⃣ 可移除 sqlite3（你目前完全沒用到）
✅ 修正後的 models.py（你可直接貼上覆蓋）

from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import declarative_base, relationship, sessionmaker

engine = create_engine("sqlite:///database.db")
Base = declarative_base()

class Product(Base):
    __tablename__ = "product"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    price = Column(Integer)
    orders = relationship("Order", backref="product")

class Customer(Base):
    __tablename__ = "customer"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    email = Column(String)
    orders = relationship("Order", backref="customer")

class Order(Base):
    __tablename__ = "order"
    id = Column(Integer, primary_key=True)
    customer_id = Column(Integer, ForeignKey("customer.id"))
    product_id = Column(Integer, ForeignKey("product.id"))
    quantity = Column(Integer)
    order_date = Column(String)

Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

你完成這個步驟後 ✅
請告訴我你是否成功執行，資料庫有產生三張表，我就讓你進入 下一步：插入假資料（Day 19 第二階段）！需要的話我也可以幫你做資料檢查指令。
你說：

name = Column(String)
這些前面都不需要給"name"嗎
ChatGPT 說：

很好的問題！
✅ 回答：

在這樣的寫法中：

name = Column(String)

這是完全 合法且推薦的寫法，因為 SQLAlchemy 預設會使用「Python 屬性的名字」作為資料表的欄位名稱。
📌 所以這兩種寫法其實是等價的：
精簡寫法	明確寫法
name = Column(String)	name = Column("name", String)
price = Column(Integer)	price = Column("price", Integer)
✅ 建議使用的寫法：

在大多數情況下（欄位名稱與變數名一致），建議使用：

name = Column(String)

除非：

    欄位名稱與 Python 保留字衝突（例如你要命名成 class）

    欄位在資料庫中的名稱和 Python 中想用的變數名不同

才需要加 "欄位名" 參數：

class_ = Column("class", String)

🧠 小結：

    你目前的這種簡潔寫法是正確且推薦的 ✅

    前面那種 name = Column("name", String) 是多餘的，不錯但沒必要

你可以放心刪掉 "name" 這些字串參數，讓程式碼更簡潔！

是否要進入「插入假資料」的下一階段？我可以給你任務敘述或讓你自己嘗試。
你說：

orders = relationship("Order", backref="product")
我注意到你這邊的O是大寫 這裡的大小寫有區別嗎? 還有這個的原理是什麼 他後面會怎麼關聯?
ChatGPT 說：

你觀察得非常精準 👀
這裡的 relationship("Order", backref="product") 裡的 "Order" 的 大小寫是有區別的，而且它背後的原理也非常值得深入理解，以下幫你完整拆解。
✅ 一、大小寫有沒有區別？

是的，有區別。

orders = relationship("Order", backref="product")

這裡的 "Order" 是 SQLAlchemy 透過字串尋找類別名稱的方式，必須完全匹配：

    你上面定義的是 class Order(...) 👉 所以這裡必須寫 "Order"（大寫 O）

    如果你寫成 "order"（小寫），會找不到對應的類別，導致錯誤：

    sqlalchemy.exc.InvalidRequestError: When initializing mapper ... could not locate a class named 'order'.

✅ 結論：要跟 class 名稱完全一樣，大小寫有差
✅ 二、它的原理是什麼？

這句：

orders = relationship("Order", backref="product")

是在告訴 SQLAlchemy：

    「我這個 Customer（或 Product）物件，可以透過 relationship 屬性，取得與它相關的 Order 資料。」

🧠 舉例：

你定義了這樣的關聯：

class Product(Base):
    ...
    orders = relationship("Order", backref="product")

SQLAlchemy 幫你建立了雙向關聯：
在 Product 裡：

    product.orders 👉 可以拿到所有訂購這個商品的 Order 列表

在 Order 裡：

    order.product 👉 自動建立，讓你可以透過 backref="product" 拿到這筆訂單所對應的 Product 物件（這是重點）

📦 簡單圖示：

Product ←───┐
            │
      product.orders → [Order, Order, ...]
            ↑
        order.product（自動建立）

✅ 三、延伸小技巧：用 back_populates 可更細控制

如果你想雙邊都明確寫出來（取代 backref），可以用：

class Product(Base):
    ...
    orders = relationship("Order", back_populates="product")

class Order(Base):
    ...
    product = relationship("Product", back_populates="orders")

功能跟 backref 一樣，但結構更清楚、便於大型專案維護。

🔍 小補充（非必須）：

若未來你想讓 order_date 支援更精確的時間運算，可以用：

from sqlalchemy import DateTime
from datetime import datetime

order_date = Column(DateTime, default=datetime.now)

目前使用 String 沒錯，後面要練習時間過濾查詢再改也可以。
✅ 總結
項目	說明
relationship("Order", backref="product")	建立雙向關聯：Product 有多個 Order，Order 可反查 Product
"Order" 字串	必須與 class 名稱完全相同，大小寫有別
backref="product"	讓 Order 類別自動擁有 .product 屬性
替代方案	back_populates 更明確、雙邊定義，適合複雜專案

✅ 結論：你的 models.py 可以直接進入 Alembic migration 階段！

請依照以下步驟操作：
🧭 Alembic Migration 建表步驟（SQLite）
步驟 1：初始化 Alembic（只需做一次）

alembic init alembic

步驟 2：編輯 alembic/env.py

找到這段（大約在 38 行附近）：

# target_metadata = None

改成：

from your_module.models import Base  # ← 你的 models.py 路徑

target_metadata = Base.metadata

例如你的 models.py 路徑是：

course_exercise_simple/course_exercise/models.py

你可能需要改成：

from course_exercise.models import Base

步驟 3：產生 migration 檔

alembic revision --autogenerate -m "Create tables"

步驟 4：套用 migration（真正建表）

alembic upgrade head

完成後你可以使用 SQLite 瀏覽器或 SQLAlchemy 查詢三張表是否建立成功。