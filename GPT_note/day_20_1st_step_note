✅ 第一段：customer_name = request.args.get("customer")
🌱 中文解釋：

從網址 /orders?customer=小明 裡，取出「customer」這個欄位的值。
📌 語法結構解釋：

request.args.get("customer")

名稱	解釋
request	Flask 提供的對象，代表「這次使用者的請求」
.args	取得「網址參數」的字典（像 ?key=value）
.get("customer")	從字典中取出 key 為 "customer" 的值（例如是「小明」）

    ✅ 這跟字典 .get() 是一樣的概念！

✅ 第二段：query = session.query(Order)

你可能以前寫過這樣的：

orders = session.query(Order).all()

現在我們只是把它「先拆開」，這樣可以：

    先定義 query 變數

    再根據條件決定要不要加 .filter(...)

    最後用 .all() 把資料取出

這樣的寫法好處是：
✅ 有彈性，可以根據不同條件（顧客、日期、商品）分段加上去查詢條件
✅ 第三段：.join(Order.customer).filter(Customer.name == customer_name)
🌱 中文解釋：

讓查詢的 Order 跟 Customer 產生關聯，然後只留下 Customer.name 符合條件的結果。
📌 語法拆解說明：

query = query.join(Order.customer)
query = query.filter(Customer.name == customer_name)

語法	意義
.join(Order.customer)	SQL 的 JOIN：讓 Order 表和 Customer 表產生關聯（根據外鍵 customer_id）
.filter(...)	加入條件篩選：只要 name == "小明" 的顧客

    ❗這裡的 .join(...) 是 SQL 的 join，不是 list 的 .join()（那個是字串用的）

📘 小筆記：SQLAlchemy 的 .join(...) 和 list 的 .join(...) 差在哪？
語法類型	功能	範例
list.join()	字串組合	"、".join(["A", "B", "C"]) → A、B、C
query.join()	資料表關聯查詢	Order.join(Customer) 用於建立 SQL 關聯式查詢
✅ 最後這行：orders = query.all()

這就是把你上面一大堆條件組合過後的查詢結果真正「執行」，取出資料。

query = query.join(...)  # 準備查詢
query = query.filter(...)  # 加入條件
orders = query.all()  # 拿資料

